version: '3.8'

services:
  zookeeper: # Kafka 的元件設計依賴 Zookeeper 來做叢集協調
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper_container
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - simulation_test_connection
    healthcheck:
      test: ['CMD-SHELL', 'echo ruok | nc localhost 2181']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka_container
    restart: unless-stopped
    ports:
      - '9092:9092'    # 給外部客戶端連線
      - '29092:29092'  # 給內部 docker network 連線
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - simulation_test_connection
    depends_on:
      zookeeper:
        condition: service_healthy # Zookeeper 被標記為 HEALTHY
    healthcheck:
      test: ['CMD-SHELL', 'nc -z localhost 29092']
#      test: ['CMD-SHELL', 'kafka-broker-api-versions.sh --bootstrap-server localhost:29092 || exit 1']
#      test: ['CMD-SHELL', 'JMX_PORT=1099 /usr/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:29092 || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  kafka-ui: # 替代方案 : Offset Explorer
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui_container
    restart: unless-stopped
    ports:
      - '9093:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Simulation-Kafka-Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    networks:
      - simulation_test_connection
    depends_on:
      kafka:
        condition: service_healthy # kafka 被標記為 HEALTHY


  mongo:
    image: mongo:7.0
    container_name: mongo_container
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - './mongo_data:/data/db'
    networks:
      - simulation_test_connection
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.runCommand({ping: 1})']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express_container
    restart: unless-stopped
    ports:
      - '27018:8081'
    env_file:
      - .env
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - simulation_test_connection
    depends_on:
      mongo:
        condition: service_healthy # mongo 被標記為 HEALTHY


  redis:
    image: redis:7.2-alpine
    container_name: redis_container
    restart: unless-stopped
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    ports:
      - '6379:6379'
    volumes:
      - './redis_data:/data'
    networks:
      - simulation_test_connection
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'PING']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis_insight:
    image: redis/redisinsight:latest
    container_name: redis_insight_container
    restart: unless-stopped
    ports:
      - '6380:5540'
    environment:
      REDISINSIGHT_HOST: 0.0.0.0 # 存取 Redis 服務，必須設置這個變數
    volumes:
      - './redis_insight_data:/db'
    networks:
      - simulation_test_connection
    depends_on:
      redis:
        condition: service_healthy # redis 被標記為 HEALTHY


networks:
  simulation_test_connection:
    driver: bridge